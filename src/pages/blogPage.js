import { useState } from "react";

import { getAllPublished, } from "@/lib/notion";
import Head from "next/head";
import { Card, CardHeader, CardContent, CardDescription, CardTitle, CardFooter } from "@/components/ui/card"

import Link from 'next/link';
import { Button } from "@/components/ui/button";
import TransitionHeader from "@/components/transitionHeader";



const blogCard_count = 8; // max number of posts per page

// function SearchBar({ onSearch }) {
//   const [query, setQuery] = useState("");

//   const handleQueryChange = (event) => {
//     setQuery(event.target.value);

//   }

//   const handleSearch = () => {
//     onSearch(query);
//   };

//   return (
//     <Grid.Container justify="center">
//       <Grid xs={12} sm={6}>
//         <Input
//           placeholder="Search blogpost by title "
//           value={query}
//           onChange={handleQueryChange}
//           radius="none"
//           bordered
//           fullWidth={true}
//           // color='success'
//           // style={{ backgroundColor: "white", borderColor: "gray" }}
//           // onFocus={(e) => {
//           //   e.target.style.borderColor = "green";
//           // }}
//           onBlur={(e) => {
//             e.target.style.borderColor = "gray";
//           }}
//         />
//       </Grid>
//       <Grid xs={12} sm={2}>
//         <Button
//           auto
//           type="success"
//           onClick={handleSearch}
//           style={{ backgroundColor: "green", color: "white" }}
//         >
//           Search
//         </Button>
//       </Grid>
//     </Grid.Container>
//   )
// }

function BlogPage({ posts }) {
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState("");
  const filteredPosts = posts.filter((post) => {
    post.title.toLowerCase().includes(searchQuery.toLowerCase)
  })
  const startIndex = (currentPage - 1) * blogCard_count;
  const endIndex = startIndex + blogCard_count;
  const currentPosts = posts.slice(startIndex, endIndex);

  const totalPages = Math.ceil(posts.length / blogCard_count);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  }

  const handleSearch = (query) => {
    setSearchQuery(query);
    setCurrentPage(1);
  }

  const colorClasses = {
    red: 'bg-red-200',
    yellow: 'bg-yellow-200',
    green: 'bg-green-200',
    // add more colors if needed
  };


  if (!posts) return <h1>No posts</h1>
  return (
    <>

      <Head>
        <title>PK|Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/pkSite_favicon.png" />
      </Head>

      <div className="flex flex-col justify-center items-center min-h-screen px-6">

        <TransitionHeader title="Notes" />
        {/* <div className="flex flex-col justify-center items-center lg:w-3/4 space-y-6"> */}
        {/* <div className="flex flex-col justify-start items-center min-h-screen px-6"> */}
        {/* <div className="space-y-4 lg:mr-24">


          </div> */}

        {/* </div> */}



        {/* <div > */}
        {/* <SearchBar onSearch={handleSearch}/> */}
        <div className="grid lg:grid-cols-2 gap-2 lg:w-3/4">
          {currentPosts.map((post, index) => (
            <div className="mr-6 mb-6" key={index}>
              <Link href={`/posts/${post.slug}`} key={index} >
                <Card className="hover:shadow-xl hover:scale-105 p-8">


                  <CardHeader>


                    <CardTitle>
                      {post.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {post.date}
                    <CardDescription>
                      {post.description} ...
                    </CardDescription>
                  </CardContent>
                  <CardFooter >
                    {/* <div className="absolute bg-${post.phaseColor}-200  px-2 py-1 m-2 rounded-md text-sm font-medium" > {post.phase}</div> */}
                    <div className={`absolute px-2 py-1 m-2 rounded-md text-sm font-medium ${colorClasses[post.phaseColor]}`} > {post.phase} </div>




                  </CardFooter>
                </Card>
              </Link>


            </div>
          ))}

        </div>


        <div className="text-center space-x-1">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page, index) => (
            <Button key={index} onClick={() => handlePageChange(page)}>{page}</Button>


          ))}
        </div>
      </div>


    </>



    // {/* </div> */}

    // </>
  );
}

export const getStaticProps = async () => {
  const data = await getAllPublished()
  return {
    props: {
      posts: data
    },
    revalidate: 60
  };


}

export default BlogPage;



